#!/bin/bash
set -e

function prerequisites {
  #Prerequisites function
  echo -e
  echo -e "${GREEN}Updating system & installing some dependencies...${NC}"
  echo -e
  DISTRO=$(cat /etc/*-release | grep -w "ID")
  
  if [[ $DISTRO == *"linuxmint"* ]] || [[ $DISTRO == *"ubuntu"* ]] || [[ $DISTRO == *"debian"* ]] || [[ $DISTRO == *"elementary"* ]]; then
                                      sudo DEBIAN_FRONTEND=noninteractive apt-get update -qq && sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade > /dev/null
                                      sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install build-essential > /dev/null && sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install git rsync curl zip unzip jq gcc wget > /dev/null
                                      echo "export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin" >> ~/.profile
                                      echo "export GOPATH=$HOME/go" >> ~/.profile
                                  else 
                                    echo "Unsupported DISTRO..."
                                    exit
   fi
  
  # Check if $CUSTOM_HOME exists and if not create it
  if ! [ -d "$CUSTOM_HOME" ]; then mkdir -p $CUSTOM_HOME; fi
  
  # Create nodes & utils home
  if ! [ -d "$CUSTOM_HOME/elrond-nodes" ]; then mkdir -p $CUSTOM_HOME/elrond-nodes; fi
  if ! [ -d "$CUSTOM_HOME/elrond-utils" ]; then mkdir -p $CUSTOM_HOME/elrond-utils; fi
  
  #Limit journalctl size
  echo -e
  echo -e "${GREEN}Limiting journalctl node units logs size...${NC}"
  echo -e
  echo 'SystemMaxUse=2000M' | sudo tee -a /etc/systemd/journald.conf && echo 'SystemMaxFileSize=400M' | sudo tee -a /etc/systemd/journald.conf
  sudo systemctl restart systemd-journald
  
  echo -e "${GREEN}Task completed.${NC}"
  echo -e
}

function paths {
  # Export environment variables
  export GOPATH=$HOME/go
  export PATH=$GOPATH/bin:$PATH
  export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
}

function go_lang {
 #Check if go is installed & install latest version

 if ! [ -x "$(command -v go)" ];

     then
       #Get the latest version of GO for amd64 & installing it
       echo -e
       echo -e "${RED}GO is not installed on your system${NC}"
       GO_LATEST="go1.14.7"
       echo -e
       echo -e "${GREEN}The best working version of Go is:${CYAN}$GO_LATEST${NC}"
       echo -e "${GREEN}Installing it now...${NC}"
       echo -e
       
       ARCH=$(dpkg --print-architecture)
       wget https://dl.google.com/go/$GO_LATEST.linux-$ARCH.tar.gz
       sudo tar -C /usr/local -xzf $GO_LATEST.linux-$ARCH.tar.gz
       rm $GO_LATEST.linux-$ARCH.tar.gz
       
     else
       VER=$(go version)
       echo -e
       echo -e "${GREEN}GO is already installed: ${CYAN}$VER${NC}${GREEN}...skipping install${NC}"
       echo -e
   fi

}

function git_clone {
  #Clone the elrong-go & elrong-config repos
  curl --silent "https://api.github.com/repos/ElrondNetwork/elrond-go/releases/latest" > $HOME/api_check_tmp
  
  if grep -Fxq "API rate limit exceeded" $HOME/api_check_tmp
                          then
                            echo -e
                            echo -e "${RED}Github API rate limit exceeded for your IP...${NC}"
                            echo -e 
                            exit
                          fi            
  rm $HOME/api_check_tmp
  
  echo -e "${GREEN}Cloning into ${CYAN}elrond-config-mainnet${GREEN} with tag ${CYAN}$CONFIGVER${GREEN}...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork && git clone https://github.com/ElrondNetwork/elrond-config-mainnet && cd elrond-config-mainnet && git checkout --force $CONFIGVER
  echo -e
  
  BINARYVER="v1.1.2"

  echo -e
  echo -e "${GREEN}Cloning into ${CYAN}elrond-go${GREEN} with tag ${CYAN}$BINARYVER${GREEN}...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork && git clone https://github.com/ElrondNetwork/elrond-go && cd elrond-go && git checkout --force $BINARYVER
  
  echo -e "${GREEN}Done ! Moving to next step...${NC}"
  echo -e

}

function git_clone_proxy {
  #Check API rate-limit
  curl --silent "https://api.github.com/repos/ElrondNetwork/elrond-go/releases/latest" > $HOME/api_check_tmp
  
  if grep -Fxq "API rate limit exceeded" $HOME/api_check_tmp
                          then
                            echo -e
                            echo -e "${RED}Github API rate limit exceeded for your IP...${NC}"
                            echo -e 
                            exit
                          fi            
  rm $HOME/api_check_tmp
  #Clone the elrond-proxy-go repo (for the observers command)
  echo -e
  echo -e "${GREEN}Cloning into the ${CYAN}elrond-proxy-go${GREEN} master branch...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork && git clone https://github.com/ElrondNetwork/elrond-proxy-go.git && cd elrond-proxy-go && git checkout --force $PROXYVER
  
  echo -e "${GREEN}Done ! Moving to next step...${NC}"
  echo -e

}

function systemd {
#Add systemd node service & syslogd logging

  echo -e
  echo -e "${GREEN}Installing systemd unit for node-$INDEX...${NC}"
  echo -e

  OFFSET=8080
  APIPORT=$(( $OFFSET + $INDEX ))

  #Create the service file for our node
  echo "[Unit]
  Description=Elrond Node-$INDEX
  After=network-online.target
  
  [Service]
  User=$CUSTOM_USER
  WorkingDirectory=$WORKDIR
  ExecStart=$WORKDIR/node -use-log-view -log-save -log-logger-name -log-correlation -log-level *:DEBUG -rest-api-interface localhost:$APIPORT $NODE_EXTRA_FLAGS
  StandardOutput=journal
  StandardError=journal
  Restart=always
  RestartSec=3
  LimitNOFILE=4096
  
  [Install]
  WantedBy=multi-user.target" > elrond-node-$INDEX.service
  
  #Move files to appropriate locations
  sudo mv elrond-node-$INDEX.service /etc/systemd/system/
  sudo systemctl enable elrond-node-$INDEX.service
  
}

function build_node {
  #Build the node from latest tag
  echo -e
  echo -e "${GREEN}Building your node from tag ${CYAN}$BINARYVER${GREEN}...${NC}"
  echo -e
  #Building the node from the elrond-go repo
  echo -e "${GREEN}Downloading go modules...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go && GO111MODULE=on go mod vendor
  echo -e "${GREEN}Compiling binary...${NC}"
  echo -e
  cd cmd/node && go build -i -v -ldflags="-X main.appVersion=$SHOWVER-0-$(git describe --tags --long | tail -c 11)"
  echo -e "${GREEN}Done !${NC}" 
  #Build the arwen standalone binary
  echo -e "${GREEN}Building arwen binary...${NC}"
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go && go get github.com/ElrondNetwork/arwen-wasm-vm/cmd/arwen@$(cat go.mod | grep arwen-wasm-vm | sed 's/.* //') && go build -o ./arwen github.com/ElrondNetwork/arwen-wasm-vm/cmd/arwen
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/arwen $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/
  echo -e "${GREEN}Done !${NC}" 
  #Build the elrond utils
  echo -e "${GREEN}Compiling the termui binary...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/termui && go build
  echo -e "${GREEN}Compiling the logviewer binary ...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/logviewer && go build
  echo -e "${GREEN}Compiling the seednode binary ...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/seednode && go build
  #Copy libwasmer to a location in path for system wide use
  echo -e "${GREEN}Copying libwasmer to your LIB folder...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/
  ARWEN_VERSION=$(cat go.mod | grep arwen | sed 's/^.*arwen-wasm-vm *//')
  ARWEN_ARCH=$(dpkg --print-architecture)
  sudo cp -f $GOPATH/pkg/mod/github.com/\!elrond\!network/arwen-wasm-vm@$ARWEN_VERSION/wasmer/libwasmer_linux_$ARWEN_ARCH.so /lib/
}

function install {
  #Copy configs to /opt/node
  echo -e "${GREEN}Copying binary & configs for ${CYAN}node-$INDEX${GREEN} to ${CYAN}$WORKDIR${GREEN}...${NC}"
  echo -e
  
  mkdir -p $WORKDIR/config
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/node $WORKDIR
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/arwen $WORKDIR
  cp -r $GOPATH/src/github.com/ElrondNetwork/elrond-config-mainnet/* $WORKDIR/config

  # Enable "Database Lookup Extensions"
  sed -i '/\[DbLookupExtensions\]/!b;n;c\\tEnabled = true' $WORKDIR/config/config.toml
}

function install_utils {
  #Copy utils to elrond-utils
  echo -e "${GREEN}Copying termui & logviewer binaries to elrond-utils...${NC}"
  echo -e
  #Copy the termui binary to the utils folder
  if ps -all | grep -q termui; then echo "Process running. Terminating for upgrade"; killall termui; sleep 2; fi
  cp -f $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/termui/termui $CUSTOM_HOME/elrond-utils/
  #Copy the logviewer binary to the utils folder
  if ps -all | grep -q logviewer; then echo "Process running. Terminating for upgrade"; killall logviewer; sleep 2; fi
  cp -f $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/logviewer/logviewer $CUSTOM_HOME/elrond-utils/
  #Copy the seednode binary to the utils folder
  if ps -all | grep -q seednode; then echo "Process running. Terminating for upgrade"; killall seednode; sleep 2; fi
  cp -f $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/seednode/seednode $CUSTOM_HOME/elrond-utils/
  #Copy the keygenerator to the utils folder
  cp -f $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/keygenerator/keygenerator $CUSTOM_HOME/elrond-utils/
}

function node_name {
  echo -e
  echo -e "${GREEN}Time to choose a node name...${NC}"
  echo -e
  read -p "Choose a custom name (default elrond-validator-$INDEX): " NODE_NAME
  if [ "$NODE_NAME" = "" ]
  then
      NODE_NAME="elrond-validator-$INDEX"
  fi
  
  sed -i "s/NodeDisplayName = \"\"/NodeDisplayName = \"${NODE_NAME//\//\\/}\"/" $WORKDIR/config/prefs.toml
  sed -i "s/Identity = \"\"/Identity = \"${IDENTITY}\"/" $WORKDIR/config/prefs.toml
}

function cleanup {
  #Cleanup Logs, Stats & DB
  echo -e
  echo -e "${RED}Erasing previous node data (db,logs,stats)...${NC}"
  
  sudo rm -rf $UPDATEWORKDIR/logs
  sudo rm -rf $UPDATEWORKDIR/stats
  sudo rm -rf $UPDATEWORKDIR/db
  sudo rm -rf $UPDATEWORKDIR/health-records
  
  #recreate erased folders 
  mkdir -p $UPDATEWORKDIR/{logs,stats,db,health-records} 
}

function update {
  echo -e
  echo -e "${GREEN}Updating node-$UPDATEINDEX binary & configs...${NC}"
  echo -e
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/node $UPDATEWORKDIR
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/arwen $UPDATEWORKDIR
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-config-mainnet/* $UPDATEWORKDIR/config -r

  # Enable "Database Lookup Extensions"
  sed -i '/\[DbLookupExtensions\]/!b;n;c\\tEnabled = true' $UPDATEWORKDIR/config/config.toml
}

function build_keygen {
  
  echo -e
  echo -e "${GREEN}Building key generator...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/keygenerator && go build
  
}

function keys {
  #Check for keys or build Key Generator and create unique node keys
  if [[ -f $NODE_KEYS_LOCATION/node-$INDEX.zip ]]; then
                       echo -e
                       echo -e "${GREEN}Found PEMs on host for node-$INDEX. Copying them to node-$INDEX config folder...${NC}"
                       echo -e 
                       unzip -j $NODE_KEYS_LOCATION/node-$INDEX.zip -d $WORKDIR/config/
               else
                 echo -e
                 echo -e "${RED}No PEMs present. You should add some valid keys...${NC}"
                 echo -e
    fi

}

function observer_keys {
  #Create unique observer keys (for the install only observers scenario)
  echo -e
  echo -e "${GREEN}Generating unique identity...${NC}"
  echo -e
  cd $CUSTOM_HOME/elrond-utils/ && ./keygenerator
  mv *.pem $WORKDIR/config/

}

function elrond_proxy {
  #Build the elrond-proxy binary
  echo -e
  echo -e "${GREEN}Building the elrond-proxy binary...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-proxy-go/cmd/proxy && go build
  
  echo -e
  echo -e "${GREEN}Copying files to the elrond-proxy folder...${NC}"
  echo -e
  mkdir -p $CUSTOM_HOME/elrond-proxy && cp -pr $GOPATH/src/github.com/ElrondNetwork/elrond-proxy-go/cmd/proxy/* $CUSTOM_HOME/elrond-proxy/

  #Create the service file for the proxy binary
  echo -e
  echo -e "${GREEN}Setting elrond-proxy as system service...${NC}"
  echo -e
  
  echo "[Unit]
  Description=Elrond Proxy
  After=network-online.target
  
  [Service]
  User=$CUSTOM_USER
  WorkingDirectory=$CUSTOM_HOME/elrond-proxy
  ExecStart=$CUSTOM_HOME/elrond-proxy/proxy
  StandardOutput=journal
  StandardError=journal
  Restart=always
  RestartSec=3
  LimitNOFILE=4096
  
  [Install]
  WantedBy=multi-user.target" > elrond-proxy.service
  
  #Move files to appropriate locations
  sudo mv elrond-proxy.service /etc/systemd/system/
  sudo systemctl enable elrond-proxy.service

}

function proxy_config {
  #Customize the config.toml file for the elrond-proxy
  echo -e
  echo -e "${GREEN}Customizing the elrond-proxy config.toml file...${NC}"
  echo -e
  
  sed -i "s/ServerPort = 8080/ServerPort = 8079/g" $CUSTOM_HOME/elrond-proxy/config/config.toml
  sed -i -n '/4294967295/q;p' $CUSTOM_HOME/elrond-proxy/config/config.toml
  
  echo "# shard id 4294967295
  [[Observers]]
     ShardId = 0
     Address = \"http://127.0.0.1:8080\"

  [[Observers]]
     ShardId = 1
     Address = \"http://127.0.0.1:8081\"

  [[Observers]]
     ShardId = 2
     Address = \"http://127.0.0.1:8082\"

  [[Observers]]
     ShardId = 4294967295
     Address = \"http://127.0.0.1:8083\"" >> $CUSTOM_HOME/elrond-proxy/config/config.toml

}

function variables_backup { 
  echo -e
  echo -e "${GREEN}Backing up your current custom variables...${NC}"
  echo -e
  
  #Create a file to safely hold the user's custom variables
  if ! [ -d "$CUSTOM_HOME/script-configs-backup" ]; then mkdir -p $CUSTOM_HOME/script-configs-backup; fi
  touch $CUSTOM_HOME/script-configs-backup/custom-variables
  
  #Exporting from variables.cfg to the backup file
  cat $SCRIPTPATH/config/variables.cfg | grep CUSTOM_HOME= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep CUSTOM_USER= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep NODE_KEYS_LOCATION= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep GITHUBTOKEN= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep IDENTITY= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep NODE_EXTRA_FLAGS= >> $CUSTOM_HOME/script-configs-backup/custom-variables

  echo -e
  echo -e "${GREEN}Your current saved varaibles are:${NC}"
  echo -e
  echo -e "$(<$CUSTOM_HOME/script-configs-backup/custom-variables)"
  echo -e

}

function variables_restore {
  
  #Varaibles values after the git pull (properly escaped for sed)
  ORIG_HOME=$(cat $SCRIPTPATH/config/variables.cfg | grep CUSTOM_HOME=) && ESCAPED_ORIG_HOME=$(printf '%s\n' "$ORIG_HOME" | sed -e 's/[\/&]/\\&/g')
  ORIG_USER=$(cat $SCRIPTPATH/config/variables.cfg | grep CUSTOM_USER=) && ESCAPED_ORIG_USER=$(printf '%s\n' "$ORIG_USER" | sed -e 's/[\/&]/\\&/g')
  ORIG_KEYS=$(cat $SCRIPTPATH/config/variables.cfg | grep NODE_KEYS_LOCATION=) && ESCAPED_ORIG_KEYS=$(printf '%s\n' "$ORIG_KEYS" | sed -e 's/[\/&]/\\&/g')
  ORIG_TOKEN=$(cat $SCRIPTPATH/config/variables.cfg | grep GITHUBTOKEN=) && ESCAPED_ORIG_TOKEN=$(printf '%s\n' "$ORIG_TOKEN" | sed -e 's/[\/&]/\\&/g')
  ORIG_IDENT=$(cat $SCRIPTPATH/config/variables.cfg | grep IDENTITY=) && ESCAPED_ORIG_IDENT=$(printf '%s\n' "$ORIG_IDENT" | sed -e 's/[\/&]/\\&/g')
  ORIG_FLAGS=$(cat $SCRIPTPATH/config/variables.cfg | grep NODE_EXTRA_FLAGS=) && ESCAPED_ORIG_FLAGS=$(printf '%s\n' "$ORIG_FLAGS" | sed -e 's/[\/&]/\\&/g')

  #Custom varaibles values from the backup file (properly escaped for sed)
  BACKUP_HOME=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep CUSTOM_HOME=) && ESCAPED_BACKUP_HOME=$(printf '%s\n' "$BACKUP_HOME" | sed -e 's/[\/&]/\\&/g')
  BACKUP_USER=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep CUSTOM_USER=) && ESCAPED_BACKUP_USER=$(printf '%s\n' "$BACKUP_USER" | sed -e 's/[\/&]/\\&/g')
  BACKUP_KEYS=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep NODE_KEYS_LOCATION=) && ESCAPED_BACKUP_KEYS=$(printf '%s\n' "$BACKUP_KEYS" | sed -e 's/[\/&]/\\&/g')
  BACKUP_TOKEN=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep GITHUBTOKEN=) && ESCAPED_BACKUP_TOKEN=$(printf '%s\n' "$BACKUP_TOKEN" | sed -e 's/[\/&]/\\&/g')
  BACKUP_IDENT=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep IDENTITY=) && ESCAPED_BACKUP_IDENT=$(printf '%s\n' "$BACKUP_IDENT" | sed -e 's/[\/&]/\\&/g')
  BACKUP_FLAGS=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep NODE_EXTRA_FLAGS=) && ESCAPED_BACKUP_FLAGS=$(printf '%s\n' "$BACKUP_FLAGS" | sed -e 's/[\/&]/\\&/g')

  #Use sed to restore the custom variables
  echo -e
  echo -e "${GREEN}---> Restoring your config files${NC}"
  echo -e

  sed -i "s/${ESCAPED_ORIG_HOME}/${ESCAPED_BACKUP_HOME}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_USER}/${ESCAPED_BACKUP_USER}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_KEYS}/${ESCAPED_BACKUP_KEYS}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_TOKEN}/${ESCAPED_BACKUP_TOKEN}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_IDENT}/${ESCAPED_BACKUP_IDENT}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_FLAGS}/${ESCAPED_BACKUP_FLAGS}/g" $SCRIPTPATH/config/variables.cfg
  
  #Remove the temp file with the custom variables
  rm $CUSTOM_HOME/script-configs-backup/custom-variables

}
